function out = bplanefromRV(mu, x_)
%BPLANEFROMVI1ANDVI2 Gets the B-Plane Parameters from In/Out Vinfinity
%
%   Assumptions/Warnings:
%   	1. This method and the one from bplanefromRV() will vary very
%   	   slightly due to this method ignorning the radius in the energy
%   	   equation (at infinity along a hyperbola).
%   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%   Inputs:
%       1. mu     [1x1]     Central Body Gravitational Parameter (km3/s2)
%       2. x_     [6x1]     State Vector w.r.t. Flyby Body (km and km/s)
%                           [x y; z; vx; vy; vz]
%   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%   Output: out structure containing fields:
%       1. b      [1x1]     B-Vector Magnitude (km)
%       2. b_     [3x1]     B-Vector
%       3. BR     [1x1]     B*R Component (km)
%       4. BT     [1x1]     B*T Component (km)
%       5. ta     [1x1]     Theta (Angle Between T and B) (rad.)
%       6. rp     [1x1]     Close Approach Radius (km)
%       7. d      [1x1]     Flyby Turning Angle (rad.)
%   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
%

    r_ = x_(1:3); r = norm(r);
    v_ = x_(4:6); v = norm(v);


    % Angular Momentum and Eccentricity Unit Vectors:
    h_ = cross(r_,v_)/norm(cross(r_,v_));
    e_ = (1/mu)*(((v^2)-(mu/r))*r_ - dot(r_,v_)*v_);
    e  = norm(e);
    
    % Half Angle Cosine and Sine
    cosp = 1/e;
    sinp = sqrt(1-(cosp^2));
    
    % STR Frame
    S_   = cosp*(e_/e) + sinp*(cross(h_,e_)/norm(cross(h_,e_)));
    T_   = cross(S_,[0;0;1])/norm(cross(S_,[0;0;1]));
    R_   = cross(S_,T_);
    
    
    % Orbit
    E = (v^2)/2)
    
    
    
    
    % Outputs
    out = struct;
    out.S_ = S_;
    out.T_ = T_;
    out.R_ = R_;
    
    
    

end

